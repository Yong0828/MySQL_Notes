

### 创建或者删除数据（只需了解即可）

- #### 创建表或者视图  

表和视图对于查询者来说区别不大，主要是本身的差别。储存数据是通过表来实现的，有物理存储空间。视图是物理不存在的，相当于子查询。

```mysql
create view IF NOT EXISTS dw.fy_01 as
(select * from  table_debit_info where dt='20200614' limit 100)

create table IF NOT EXISTS dw.fy_0101 as
(select * from  table_debit_info where dt='20200614' limit 100)
```

- #### 删除表或者视图

```mysql
drop view dw.fy_01

drop table dw.fy_0101
```



### 检索数据

- #### select语句：选择列

```mysql
# 检索所有的列
select *
from tablename;

# 检索多个列
select id, name
from tablename;

# 检索某一列的不同的值
select distinct grade
from tablename;
```

- #### limit语句 限制行数  (想看表和字段结构的时候用的比较多)

```mysql
# 限制前100行
select * from table_order limit 100;

# 随机抽样1000行
select *
from table_order
order by rand()
limit 1000;

```



### 排序检索

order by 语句  排序 默认升序 (asc)    降序desc

```mysql
# 默认升序
select apply_date, name
from tablename
order by apply_date;

# 多列排序
select apply_date, name
from tablename
order by apply_date, name desc;

# 按位置排序
select apply_date, name
from tablename
order by 1, 2 desc;
```





### 过滤数据

#### where 语句：  where一般存在代码末端，用来加限制条件的时候使用

```mysql
select  *  from  table_order where final_input_time='2020-06-17'
```

#### where语句常用操作符

- 精准查询： =(等于)  <>(不等于)  !=(不等于)  >（大于） <（小于）

```mysql
select * from table_order where date(final_input_time)='2020-06-17' ;
select * from table_order where date(final_input_time) != '2020-06-17' ;
select * from table_order where date(final_input_time) <> '2020-06-17' ;


```

- 模糊匹配："like"会与''%''和 "__"结合使用 其中%居多。''%''可以表示0个或者多个字符，匹配任意字符长度。_"_" 只会表示单个字符，用的比较少，了解即可。注：%也可以放在中间使用


```mysql
select * from table_order where shop_name like  '%%威利斯%%' ;
```

- 范围查询：in、between ... and..

```mysql
select * from table_order where date(final_input_time) in ('2020-06-17') ;
select * from table_order where date(final_input_time)  not in ('2020-06-17') ;
select * from table_order where date(final_input_time)  between '2020-06-01' and '2020-06-17' ;

```

- 多条件查询：and，or

```mysql
select *
from tablename
where grade in ('A', 'B')
and apply_date >= '2020-01-01';
```

### case  when...then... end或if() 等条件语句

- CASE WHEN  [expr]  THEN  [result1]… ELSE [default] END 

- IF（[expr],[result1],[result2] ）

```mysql
select 
date(odr.final_input_time) dateon
,count(case when approve_state=1 then id end) 通过单
,sum(if( approve_state=1,1,0 )) 通过单
from  table_order odr
where 
date(odr.final_input_time) >='2020-06-01'
group by 1
```



## 汇总数据

#### 聚合函数

常用的聚合函数 sum( )、count（）、count(distinct )、avg() 、max()、min()

```mysql
select 

sum(apply_amount) 申请金额

,count( id)  申通人数

,count(distinct shop_id)  活跃商户

from table_order

where final_input_state=1

and hidden=0
```



#### group by 语句

数据分组 结合聚合语句使用 相当于excel的数据透视功能，对对透视列进行group by

```mysql
select 
 subtr(apply_time,1,7) apply_month
,count(id) 人数
from table_order
group by dateon;
```



##  子查询

子查询是一个嵌套查询  一般在一张基础表上面在做聚合。

```mysql
select
shop_id
,count(*) cnt
from
(
select 
debit.id  debit_id
,debit.shop_id
from
table_order  debit
where date(final_input_time)=date(now())
) a
group by 1
```



## 表联接

#### union语句 纵列关联(名称要都相同)

​     union主要用于两张表的上下关联，如果遇有一样的同一行数据，则自动去重

​     union all主要用于两张表的上下关联，如果遇有一样的同一行数据，不会去重

-  union


```mysql
select 'M1' as overdue_type union
select 'M2' as overdue_type union
select 'M3' as overdue_type union
select 'M3+' as overdue_type 
```

- union all


```mysql
select 'M1' as overdue_type union all
select 'M2' as overdue_type union all
select 'M3' as overdue_type union all
select 'M3' as overdue_type union all
select 'M3+' as overdue_type 
```



#### join语句 横向表联接

- left join        左关联： 获取左表所有记录，即使右表没有对应匹配的记录。用的比较多 .


 ![img](https://www.runoob.com/wp-content/uploads/2014/03/img_leftjoin.gif) 

- right join     右关联： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录 


 ![img](https://www.runoob.com/wp-content/uploads/2014/03/img_rightjoin.gif) 

- inner join    内关联： 取交集，获取两个表中字段匹配关系的记录 。主要用于共债查询。


 ![img](https://www.runoob.com/wp-content/uploads/2014/03/img_innerjoin.gif) 

- full join  全关联：取并集。主要用于Lagged




```mysql
select 
odr.id
,odr.user_name
,odr.shop_id
,channel .channel_code
,channel .channel_desc
from  table_order odr
left join  shop_debit_channel channel on  odr.channel_id=channel.id
where 
odr.shop_id in (19211762,19213905)
and channel .channel_code is not null
```

####  等值联接  

  等值联接一般把条件放在where里面 使用等号“=”连接相关的表

```MySQL
select 
debit.id  debit_id
,debit.shop_id
,shop.id shop_id_new
,shop.name
from
table_order  debit
,shop shop
where date(final_input_time)=date(now())
and shop.id=debit.shop_id
```



#### NULL值的处理

- 在列中的处理


```mysql
ifnull(column_name,0)

ifnull(column_name,999)
```

- 在筛选条件里的处理


```mysql
where  column_name is  (not) null
```









参考文档：

 https://www.runoob.com/mysql/mysql-null.html 
