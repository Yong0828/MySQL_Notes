
## 中阶

一些比较生僻少用的语法

1、csum实现累加功能：将每日的cnt累加求和

```mysql
SET @csum := 0;
SELECT dateon, cnt, (@csum := @csum + cnt) AS 累计单量
FROM 
(
select 
date(final_input_time) dateon
,count(distinct id) cnt
from table_order
where approve_state=1
and hidden=0
and date(final_input_time) between '2019-04-01' and '2019-05-01'
group by 1
) a
```



2、用if实现row_number() over(partition by columns order by cloumns asc) 即每行面前按自己想要的逻辑添加序号 ：计算出每日单量第一的大区

```mysql
SELECT * FROM (
SELECT a.*
, IF(@city=a.dateon, @rank:=@rank+1, @rank:=1) rank, @city:=a.dateon
 FROM 
	 (
select 
	shop.area_type
	,date(final_input_time) dateon
	,count(*) cnt
	from  table_order debit
	left join shop on shop.id=debit.shop_id
	where 
	debit.final_input_state=1
	and date(final_input_time) >='2020-06-01'
	and debit.hidden=0
group by
	area_type
	,dateon
	order by dateon,cnt desc
) a, (SELECT @city:=0,@rank:=0) b

) c 
WHERE rank =1;	
	
```


3、可以将a列的不同b列的值放在同一行里面，用逗号隔开，且取最值    某个订单有很多人做过回访，查询哪些人做过回访，并且第一次回访的时间是什么时候，第一次回访的人是谁

```mysql
select
a.order_id,
a.mobile,
a.final_input_time apply_time,
substring_index(group_concat(b.worke_name order by b.create_time desc),',',1) marketer,
group_concat(b.worke_name order by b.create_time desc) total_marketers,
group_concat(distinct b.worke_name order by b.create_time desc) total_distinct_marketers, -- == 去重并列
substring_index(group_concat(b.create_time order by b.create_time desc),',',1) marketing_time
from duckchatdb.order_info a
left join duckchatdb.customer_market_record b on a.mobile=b.call_phone and a.final_input_time>b.create_time and a.user_accept=1 and a.order_type=2
where a.user_accept=1 and a.order_type=2 -- and datediff(date(a.user_accept_time),date(now()))=0
group by 1

group_concat：可以将a列的不同b列的值放在同一行里面，用逗号隔开
substring_index：截取
```

 
4、拆分字段：把同一行里面有逗号隔开的内容，拆分成多行 即group_concat的逆写法

```mysql
法一：
select 
distinct substring_index(substring_index(shop_id,',', b.help_topic_id+1),',',-1) shop_id
from 
(
    select distinct replace(refuse_name,'商户号=','') shop_id
from credit_auto_check_errinfo
where refuse_name like '商户号=%'
) a
join mysql.help_topic b on b.help_topic_id < (length(a.shop_id) - length(REPLACE(a.shop_id, ',', '')) + 1)

(length(a.shop_id) - length(REPLACE(a.shop_id, ',', '')) + 1):计算字符串中被逗号隔开的字符数
```

```sql
法二：
select 
distinct substring_index(substring_index(shop_id,',', b.int_value+1),',',-1) shop_id
from (select distinct replace(refuse_name,'商户号=','') shop_id
   from credit_auto_check_errinfo
   where refuse_name like '商户号=%') a
join (
SELECT x1.N + x10.N*10 + x100.N*100 + x1000.N*1000 as int_value
FROM (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) x1,
       (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) x10,
       (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) x100,
       (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9
       ) x1000
 WHERE x1.N + x10.N*10 + x100.N*100 + x1000.N*1000 <= 10000)
 b on b.int_value < (length(a.shop_id) - length(REPLACE(a.shop_id, ',', '')) + 1);
 
```

参考文档： https://blog.csdn.net/qq_31780525/article/details/54416320 



```mysql
5、随机取数1000条 order by rand() limit 1000
 
6、从第2条记录开始读1条，取第2高的记录    select * from tablename limit 1,1 
```


7、窗口函数
1）rank( )  over (partition by <用于分组的列名>   order by <用于排序的列名>)    有相同数字时候，排名一样，但是会占用往后的排名 12245
2）dense_rank( )  over (partition by <用于分组的列名>   order by <用于排序的列名>) 有相同数字时候，排名一样，不会占用往后的排名  12234
3）row_number( )   over (partition by <用于分组的列名>   order by <用于排序的列名>) 有相同数字时候，排名不一样 123456
4）avg（）over (partition by <用于分组的列名>   order by <用于排序的列名>)
5）sum（）over (partition by <用于分组的列名>   order by <用于排序的列名>)
6）min（）over (partition by <用于分组的列名>   order by <用于排序的列名>)
7）max（）over (partition by <用于分组的列名>   order by <用于排序的列名>)
8）count（）over (partition by <用于分组的列名>   order by <用于排序的列名>)

